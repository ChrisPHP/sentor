# name: is the name of the topic to monitor
# signal_when: optional, can be either 'not published' or 'published'. Respectively, it will send a warning when the topic is not published or when it is.
# signal_lambdas: optional, it's a list of (pythonic) lambda expressions such that when they are satisfied a warning is sent. You can use the python package `math` in your lambda expressions.
# execute: optional, a list of processes to execute if `signal_when` is satisfied, or if all lambda expressions are satisfied. They will be executed in sequence. See `Child arguments of execute` below. 
# lock_exec: optional (default=False), lock out other threads while this one is executing its sequence of processes.
# timeout: optional (default=0), amount of time (in seconds) for which the signal has to be satisfied before sending the warning/executing processes.

# Child arguments of `execute`:
# call: optional, call a rosservice.
# publish: optional, publish to a rostopic.
# action: optional, send a goal for an actionlib action.
# sleep: optional, put the sentor node to sleep.
# shell: optional, execute a shell command.  

# Child arguments of `call`:
# message: optional, publish your own (string) message to the topic `/sentor/event` when `call` is executed. 
# service_name: the name of the service you are calling.
# service_args: a list of service arguments specified in the service request class. Each arg must be prefixed by `req.`.

# Child arguments of `publish`:
# message: optional, publish your own (string) message to the topic `/sentor/event` when `publish` is executed.
# topic_name: the name of the topic you are publishing to. 
# topic_latched: boolean specifying whether you are latching the topic (or not).
# topic_args: a list of topic arguments specified in the topic's message class. Each arg must be prefixed by `msg.`.

# Child arguments of `action`:
# message: optional, publish your own (string) message to the topic `/sentor/event` when `action` is executed.
# namespace: the namespace of the action.
# package: the ros package from which the action specification is retrieved. Specifically the action specification is retrieved from `package.msg`. 
# action_spec: the action specification.
# goal_args: a list of goal arguments specified in the action spec's goal class. Each arg must be prefixed by `goal.`.

# Child arguments of `sleep`:
# message: optional, publish your own (string) message to the topic `/sentor/event` when `sleep` is executed.
# duration: sleep the sentor node for `duration` seconds.

# Child arguments of `shell`:
# message: optional, publish your own (string) message to the topic `/sentor/event` when `shell` is executed.
# cmd_args: a list of shell command components.

  
- name: "/topological_navigation/feedback"
#  signal_when : 'not published'
#  safety_critical: False
  signal_lambdas:
  - expression: "lambda msg: msg.feedback.route == 'WayPoint1'"
    safety_critical: False
  execute:
  - action:
      message: "Navigating to charging node."
      namespace: "/topological_navigation"
      package: "topological_navigation"
      action_spec: "GotoNodeAction"
      goal_args:
      -  "goal.target = 'WayPoint45'"
  - shell:
      message: "Cow says 'moo'."
      cmd_args:
      - "cowsay"
      - "moo"
  lock_exec: False
  timeout: 0.0                 


- name: "/topological_navigation/feedback"
#  signal_when : 'not published'
#  safety_critical: False
  signal_lambdas:
  - expression: "lambda msg: msg.feedback.route == 'WayPoint45'"
    safety_critical: False
  execute:
  - call:
      message: "Teleporting the robot."
      service_name: "/gazebo/set_model_state"
      service_args:
      -  "req.model_state.model_name = 'thorvald_ii'"
      -  "req.model_state.pose.orientation.w = 1.0"
  - sleep:
      message: "zzz"
      duration: 3.0
  - publish:
      message: "Relocalising the robot."
      topic_name: "/initialpose"
      topic_latched: False
      topic_args:
      -  "msg.header.frame_id = '/map'"
      -  "msg.pose.pose.orientation.w = 1.0"
  lock_exec: False
  timeout: 0.0


- name : '/row_detector/path_error'
#  signal_when : 'not published'
#  safety_critical: False
  signal_lambdas :
    - expression: "lambda msg : math.isnan(msg.y)"
      safety_critical: True
  timeout : 0.0


- name : '/row_detector/path_error'
#  signal_when : 'not published'
#  safety_critical: False
  signal_lambdas :
    - expression: "lambda msg : not math.isnan(msg.y)"
      safety_critical: False
  execute:
  - call:
      message: "Safe to operate. Resetting safety tag."
      service_name: "/sentor/reset_safety_tag"
      service_args:
      -  "req.data = True"
  timeout : 0.0
